---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  namespace: media
  name: piped
spec:
  chart:
    spec:
      chart: app-template
      version: 3.7.1
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  interval: 30m
  values:
    defaultPodOptions:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
    controllers:
      backend:
        strategy: RollingUpdate
        annotations:
          secret.reloader.stakater.com/reload: piped-secret
        containers:
          app:
            image:
              repository: 1337kavin/piped
              tag: latest@sha256:759979280703ba11e4069405d21c2fed62a902d135fcea25d76fa13a12f278d7
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
            resources:
              requests:
                cpu: 10m
                memory: 500Mi
              limits:
                memory: 2000Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - ALL
      frontend:
        strategy: RollingUpdate
        containers:
          app:
            image:
              repository: ghcr.io/bjw-s-labs/piped-frontend
              tag: 2025.3.17@sha256:8ed05c7df0bc8899e54a3952a99b63d55cdc7669d759beeb9370fbb32330468b
            env:
              BACKEND_HOSTNAME: piped-api.${SECRET_DOMAIN}
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
            resources:
              requests:
                cpu: 10m
                memory: 32Mi
              limits:
                memory: 256Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - ALL
              readOnlyRootFilesystem: true
      ytproxy:
        strategy: RollingUpdate
        containers:
          app:
            image:
              repository: 1337kavin/piped-proxy
              tag: latest@sha256:d53bcf3eb0eb944656e0606a402c26a6e2e6247b32c4200030fa72b8ad79379f
            command:
              - /app/piped-proxy
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
            resources:
              requests:
                cpu: 10m
                memory: 500Mi
              limits:
                memory: 2000Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - ALL
      # bg-helper:
      #   type: deployment
      #   annotations:
      #     reloader.stakater.com/auto: "true"
      #   containers:
      #     bg-helper:
      #       image:
      #         repository: 1337kavin/bg-helper-server
      #         tag: latest@sha256:28048237b3094209774ce8027f658615f2ebbb1ca14d0a2c4c8c0682d083332c
      update-subscriptions:
        type: cronjob
        cronjob:
          schedule: "@daily"
          backoffLimit: 0
          concurrencyPolicy: Forbid
          failedJobsHistory: 1
          successfulJobsHistory: 0
        containers:
          app:
            image:
              repository: ghcr.io/bjw-s-labs/piped-scripts
              tag: 0.0.2@sha256:f954c8065473920415d316b16797f7c525838e629e8603bd227b33c671544149
            env:
              SCRIPT_NAME: update_subscriptions.sh
              PIPED_BACKEND: http://piped-backend.media.svc.cluster.local:8080
              MIN_SLEEP_BETWEEN_FEEDS: 30
              MAX_SLEEP_BETWEEN_FEEDS: 120
              PGHOST: postgres-rw.data.svc.cluster.local
              PGDATABASE: piped
              PGUSER: ${PIPED_POSTGRES_USER}
              PGPASSWORD: ${PIPED_POSTGRES_PASSWORD}
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 128Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - ALL
    service:
      backend:
        controller: backend
        ports:
          http:
            port: 8080
      frontend:
        controller: frontend
        ports:
          http:
            port: 8080
      ytproxy:
        controller: ytproxy
        ports:
          http:
            port: 8080
      # bg-helper:
      #   controller: bg-helper
      #   ports:
      #     http:
      #       port: 3000
    ingress:
      backend:
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-origin: "https://piped.${SECRET_DOMAIN}, https://piped-api.${SECRET_DOMAIN}, https://piped-proxy.${SECRET_DOMAIN}"
        className: "nginx"
        hosts:
          - host: piped-api.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: backend
                  port: http
      frontend:
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/appName: Piped
          hajimari.io/icon: mdi:youtube
          hajimari.io/group: media
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-origin: "https://piped.${SECRET_DOMAIN}, https://piped-api.${SECRET_DOMAIN}, https://piped-proxy.${SECRET_DOMAIN}"
        className: "nginx"
        hosts:
          - host: piped.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: frontend
                  port: http
      ytproxy:
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-origin: "https://piped.${SECRET_DOMAIN}, https://piped-api.${SECRET_DOMAIN}, https://piped-proxy.${SECRET_DOMAIN}"
        className: "nginx"
        hosts:
          - host: piped-proxy.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: ytproxy
                  port: http
      # bg-helper:
      #   annotations:
      #     cert-manager.io/cluster-issuer: "letsencrypt-production"
      #   className: "nginx"
      #   hosts:
      #     - host: piped-bg-helper.${SECRET_DOMAIN}
      #       paths:
      #         - path: /
      #           service:
      #             identifier: bg-helper
      #             port: http
    persistence:
      config:
        type: secret
        name: piped-secret
        advancedMounts:
          backend:
            app:
              - path: /app/config.properties
                subPath: config.properties
                readOnly: true
