---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app lidarr
  namespace: media
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 2.3.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    defaultPodOptions:
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
    controllers:
      main:
        annotations:
          reloader.stakater.com/auto: "true"
          configmap.reloader.stakater.com/reload: "lidarr-pushover"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 15.5
              pullPolicy: IfNotPresent
            envFrom: &envFrom
              - secretRef:
                  name: lidarr-secret
          # init-script:
          #   image:
          #     repository: alpine 
          #     tag: 3.19.0
          #     pullPolicy: IfNotPresent
          #   command:
          #   - "/custom-cont-init.d/script_init.bash"
        containers:
          main:
            image:
              repository: ghcr.io/onedr0p/lidarr-plugins
              tag: 2.1.1.3878@sha256:6e3d3df8f076a746b0fb9bb3131c7c970e4020c7986521df41e8b92cbf0bf0f2
            env:
              TZ: "${TIMEZONE}"
              LIDARR__INSTANCE_NAME: Lidarr
              LIDARR__PORT: &port 80
              LIDARR__LOG_LEVEL: info
            envFrom:
              - secretRef:
                  name: lidarr-secret
            resources:
              requests:
                cpu: 10m
                memory: 250Mi
              limits:
                memory: 2000Mi
    service:
      main:
        ports:
          http:
            port: *port
    ingress:
      main:
        enabled: true
        className: "nginx"
        annotations:
          hajimari.io/icon: mdi:headphones
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - *host
    persistence:
      config:
        enabled: true
        existingClaim: lidarr-config-v1
      media:
        enabled: true
        existingClaim: nfs-media-pvc-v2
      plugin-config:
        enabled: true
        existingClaim: lidarr-plugin-v1
        globalMounts:
          - path: /custom-services.d
      plugin-init:
        enabled: true
        type: configMap
        name: plugin-init
        globalMounts:
          - path: /custom-cont-init.d/script_init.bash
            subPath: script_init.bash